const {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
} = require("@google/generative-ai");

const apiKey = process.env.GEMINI_SECRECT_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
    model: "gemini-2.0-flash-exp",
});

const Config = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,

};


module.exports.chatSession = model.startChat({
    ...Config,
    responseMimeType: "text/plain",
    history: [
    ],
});


module.exports.codeGenSession = model.startChat({
    ...Config,
    responseMimeType: "application/json",
    history: [
        {
            role: "user",
            parts: [
                { text: "generate the todo app:`\nGenerate a Project in React. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, \nwithout any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\nalso you can use date-fns for date format and react-chartjs-2 chart, graph library\n\nReturn the response in JSON format with the following schema:\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\n\nHere‚Äôs the reformatted and improved version of your prompt:\n\nGenerate a programming code structure for a React project using Vite. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, without any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\n\nReturn the response in JSON format with the following schema:\n\njson\nCopy code\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\nEnsure the files field contains all created files, and the generatedFiles field lists all the filenames. Each file's code should be included in the code field, following this example:\nfiles:{\n  \"/App.js\": {\n    \"code\": \"import React from 'react';\\nimport './styles.css';\\nexport default function App() {\\n  return (\\n    <div className='p-4 bg-gray-100 text-center'>\\n      <h1 className='text-2xl font-bold text-blue-500'>Hello, Tailwind CSS with Sandpack!</h1>\\n      <p className='mt-2 text-gray-700'>This is a live code editor.</p>\\n    </div>\\n  );\\n}\"\n  }\n}\n  Additionally, include an explanation of the project's structure, purpose, and functionality in the explanation field. Make the response concise and clear in one paragraph.\n  - When asked then only use this package to import, here are some packages available to import and use (date-fns,react-chartjs-2,\"firebase\",\"@google/generative-ai\" ) only when it required\n  \n  - For placeholder images, please use a https://archive.org/download/placeholder-image/placeholder-image.jpg\n  -Add Emoji icons whenever needed to give good user experinence\n  - all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.\n\n- By default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.\n\n- Use icons from lucide-react for logos.\n\n- Use stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags.\n   `\n" },
            ],
        },
        {
            role: "model",
            parts: [
                { text: "```json\n{\n  \"projectTitle\": \"Todo App\",\n  \"explanation\": \"This project implements a fully functional Todo application using React, styled with Tailwind CSS, and includes icons from Lucide React. It allows users to add, delete, and toggle the completion status of todos. The app is structured into several components for better organization and maintainability. It's designed to be visually appealing and production-ready, focusing on a user-friendly interface and clean code.\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"import React from 'react';\\nimport TodoList from './components/TodoList';\\nimport TodoForm from './components/TodoForm';\\nimport { Plus } from 'lucide-react';\\nimport { useState, useEffect } from 'react';\\nimport { format } from 'date-fns';\\n\\n\\nfunction App() {\\n  const [todos, setTodos] = useState(() => {\\n    const savedTodos = localStorage.getItem('todos');\\n    return savedTodos ? JSON.parse(savedTodos) : [];\\n});\\n\\n  useEffect(() => {\\n    localStorage.setItem('todos', JSON.stringify(todos));\\n  }, [todos]);\\n\\n\\n  const addTodo = (text) => {\\n    if(text.trim() !== ''){\\n    const newTodo = {\\n      id: Date.now(),\\n      text: text,\\n      completed: false,\\n      createdAt: format(new Date(), 'MMM dd, yyyy HH:mm')\\n    };\\n    setTodos([...todos, newTodo]);\\n  }\\n  };\\n\\n  const toggleComplete = (id) => {\\n    setTodos(todos.map(todo => \\n      todo.id === id ? {...todo, completed: !todo.completed} : todo\\n    ));\\n  };\\n\\n  const deleteTodo = (id) => {\\n    setTodos(todos.filter(todo => todo.id !== id));\\n  };\\n\\n  const [isModalOpen, setIsModalOpen] = useState(false)\\n\\n   const openModal = () => {\\n      setIsModalOpen(true)\\n    }\\n\\n   const closeModal = () => {\\n      setIsModalOpen(false)\\n    }\\n\\n  return (\\n    <div className=\\\"bg-gray-100 min-h-screen flex items-center justify-center p-4\\\">\\n      <div className=\\\"bg-white rounded-lg shadow-xl p-6 w-full max-w-2xl\\\">\\n        <header className=\\\"flex justify-between items-center mb-6\\\">\\n          <h1 className=\\\"text-2xl font-bold text-gray-800\\\">My Todo List üìù</h1>\\n          <button onClick={openModal} className=\\\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\\\">\\n            <Plus className='inline-block mr-1'/> Add Todo\\n          </button>\\n        </header>\\n        \\n        <TodoList todos={todos} toggleComplete={toggleComplete} deleteTodo={deleteTodo} />\\n        {isModalOpen && <TodoForm addTodo={addTodo}  closeModal={closeModal}/>}\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n\"\n    },\n    \"/components/TodoList.js\": {\n      \"code\": \"import React from 'react';\\nimport { Check, Trash } from 'lucide-react';\\n\\nfunction TodoList({ todos, toggleComplete, deleteTodo }) {\\n    if (todos.length === 0) {\\n        return <p className=\\\"text-gray-600 italic text-center\\\">No todos yet. Add some!</p>\\n    }\\n    return (\\n        <ul className=\\\"divide-y divide-gray-200\\\">\\n            {todos.map(todo => (\\n                <li key={todo.id} className=\\\"py-3 flex items-center justify-between\\\">\\n                    <div className=\\\"flex items-center\\\">\\n                        <input\\n                            type=\\\"checkbox\\\"\\n                            checked={todo.completed}\\n                            onChange={() => toggleComplete(todo.id)}\\n                            className=\\\"mr-3 h-5 w-5 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\\\"\\n                        />\\n                        <span className={`text-gray-800 ${todo.completed ? 'line-through text-gray-500' : ''}`}>\\n                          {todo.text}\\n                           <p className='text-xs text-gray-500 italic'> Added at: {todo.createdAt} </p>\\n                        </span>\\n\\n                    </div>\\n                    <div className='flex items-center gap-2'>\\n                        <button onClick={() => deleteTodo(todo.id)} className=\\\"text-red-600 hover:text-red-800 focus:outline-none\\\">\\n                            <Trash />\\n                        </button>\\n\\n                    </div>\\n                </li>\\n            ))}\\n        </ul>\\n    );\\n}\\n\\nexport default TodoList;\"\n    },\n    \"/components/TodoForm.js\": {\n      \"code\": \"import React, { useState } from 'react';\\nimport { X } from 'lucide-react';\\n\\nconst TodoForm = ({ addTodo, closeModal }) => {\\n    const [text, setText] = useState('');\\n\\n    const handleSubmit = (e) => {\\n        e.preventDefault();\\n        addTodo(text);\\n        setText('');\\n        closeModal()\\n    };\\n\\n    return (\\n      <div className=\\\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\\\">\\n      <div className=\\\"relative bg-white rounded-lg shadow-xl p-6 w-full max-w-md\\\">\\n        <div className='flex justify-between items-center mb-4'>\\n            <h2 className=\\\"text-xl font-bold text-gray-800\\\">Add New Todo</h2>\\n          <button onClick={closeModal} className=\\\"text-gray-500 hover:text-gray-700 focus:outline-none\\\">\\n              <X />\\n          </button>\\n        </div>\\n            <form onSubmit={handleSubmit} className=\\\"flex flex-col gap-4\\\">\\n                <input\\n                    type=\\\"text\\\"\\n                    value={text}\\n                    onChange={(e) => setText(e.target.value)}\\n                    placeholder=\\\"Enter your todo...\\\"\\n                    className=\\\"border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring focus:ring-blue-200\\\"\\n                />\\n                <button type=\\\"submit\\\" className=\\\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\\\">\\n                    Add Todo\\n                </button>\\n            </form>\\n        </div>\\n    </div>\\n    );\\n};\\n\\nexport default TodoForm;\"\n    }\n  },\n  \"generatedFiles\": [\n    \"/App.js\",\n    \"/components/TodoList.js\",\n    \"/components/TodoForm.js\"\n  ]\n}\n```\n" },
            ],
        },
    ],
})

// const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
// console.log(result.response.text());
